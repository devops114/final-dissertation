
AWSTemplateFormatVersion: '2010-09-09'
Description: 'E-commerce Dissertation CI/CD Pipeline - Final'

Parameters:
  KeyName:
    Description: Name of an existing EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName

  GitHubRepo:
    Description: GitHub repository name
    Type: String
    Default: devops114/final-dissertation

  GitHubBranch:
    Description: GitHub branch to deploy
    Type: String
    Default: main

  GitHubToken:
    Description: GitHub OAuth token
    Type: String
    NoEcho: true

Resources:
  # Security Group
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0

  # IAM Roles
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # S3 Bucket
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ecommerce-artifacts-final-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled

  # CodeBuild
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: ecommerce-build-final
      Description: Build and test e-commerce application - Final
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: NODE_ENV
            Value: production

  # CodeDeploy
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: ecommerce-app-final
      ComputePlatform: Server

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: ecommerce-dg-final
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      Ec2TagFilters:
        - Key: Name
          Value: ecommerce-dissertation-final
          Type: KEY_AND_VALUE

  # EC2 Instance
  EcommerceInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-0fe630eb857a6ec83
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref WebSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Name
          Value: ecommerce-dissertation-final
        - Key: Project
          Value: dissertation-final
        - Key: Environment
          Value: production
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "=== Starting EC2 instance setup ==="
          
          # Update system (continue on error)
          dnf update -y || echo "Update failed but continuing"
          
          # Install minimal dependencies
          dnf install -y ruby wget || echo "Package installation failed but continuing"
          
          # Install CodeDeploy agent (simple approach)
          echo "Installing CodeDeploy agent..."
          cd /home/ec2-user
          wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install || echo "Download failed but continuing"
          chmod +x ./install || echo "Chmod failed but continuing"
          sudo ./install auto || echo "CodeDeploy install failed but continuing"
          
          # Create directories
          mkdir -p /home/ec2-user/backend /var/www/frontend
          
          # Start CodeDeploy agent
          systemctl enable codedeploy-agent || echo "Enable failed but continuing"
          systemctl start codedeploy-agent || echo "Start failed but continuing"
          
          echo "=== EC2 instance setup complete ==="

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  # CodePipeline
  CICDPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: ecommerce-pipeline-final
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub-Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: devops114
                Repo: final-dissertation
                Branch: main
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

Outputs:
  WebsiteURL:
    Description: Application URL
    Value: !Sub 'http://${EcommerceInstance.PublicDnsName}'
  PipelineURL:
    Description: Pipeline Console URL
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${CICDPipeline}/view'
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EcommerceInstance
  S3Bucket:
    Description: S3 Bucket for Artifacts
    Value: !Ref ArtifactStoreBucket
  CodeDeployApp:
    Description: CodeDeploy Application Name
    Value: !Ref CodeDeployApplication
  CodeDeployGroup:
    Description: CodeDeploy Deployment Group
    Value: !Ref CodeDeployDeploymentGroup
